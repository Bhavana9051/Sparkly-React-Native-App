diff --git a/node_modules/react-native-text-ticker/index.js b/node_modules/react-native-text-ticker/index.js
index 0a28c78..dfa69ac 100644
--- a/node_modules/react-native-text-ticker/index.js
+++ b/node_modules/react-native-text-ticker/index.js
@@ -6,12 +6,12 @@ import {
   Text,
   View,
   ScrollView,
-  NativeModules,
-  findNodeHandle,
+  // NativeModules,
+  // findNodeHandle,
   I18nManager
 } from 'react-native'
 
-const { UIManager } = NativeModules
+// const { UIManager } = NativeModules
 
 export const TextTickAnimationType = Object.freeze({
   auto: 'auto',
@@ -21,24 +21,24 @@ export const TextTickAnimationType = Object.freeze({
 
 export default class TextMarquee extends PureComponent {
   static defaultProps = {
-    style:             {},
-    loop:              true,
-    bounce:            true,
-    scroll:            true,
-    marqueeOnMount:    true,
-    marqueeDelay:      0,
-    isInteraction:     true,
-    useNativeDriver:   true,
-    repeatSpacer:      50,
-    easing:            Easing.ease,
-    animationType:     'auto',
-    bounceSpeed:       50,
-    scrollSpeed:       150,
-    bouncePadding:     undefined,
+    style: {},
+    loop: true,
+    bounce: true,
+    scroll: true,
+    marqueeOnMount: true,
+    marqueeDelay: 0,
+    isInteraction: true,
+    useNativeDriver: true,
+    repeatSpacer: 50,
+    easing: Easing.ease,
+    animationType: 'auto',
+    bounceSpeed: 50,
+    scrollSpeed: 150,
+    bouncePadding: undefined,
     bounceDelay: 0,
     shouldAnimateTreshold: 0,
-    disabled:          false,
-    isRTL:             undefined
+    disabled: false,
+    isRTL: undefined
   }
 
   animatedValue = new Animated.Value(0)
@@ -47,10 +47,10 @@ export default class TextMarquee extends PureComponent {
   containerRef = null
 
   state = {
-    animating:    false,
-    contentFits:  true,
+    animating: false,
+    contentFits: true,
     shouldBounce: false,
-    isScrolling:  false
+    isScrolling: false
   }
 
   constructor(props) {
@@ -96,7 +96,7 @@ export default class TextMarquee extends PureComponent {
   }
 
   makeCancelable = (promise) => {
-    let cancel = () => {}
+    let cancel = () => { }
     const wrappedPromise = new Promise((resolve, reject) => {
       cancel = () => {
         resolve = null
@@ -142,12 +142,12 @@ export default class TextMarquee extends PureComponent {
     } = this.props
     this.setTimeout(() => {
       const scrollToValue = isRTL ?? I18nManager.isRTL ? this.textWidth + repeatSpacer : -this.textWidth - repeatSpacer
-      if(!isNaN(scrollToValue)) {
+      if (!isNaN(scrollToValue)) {
         Animated.timing(this.animatedValue, {
-          toValue:         scrollToValue,
-          duration:        duration || this.textWidth * scrollSpeed,
-          easing:          easing,
-          isInteraction:   isInteraction,
+          toValue: scrollToValue,
+          duration: duration || this.textWidth * scrollSpeed,
+          easing: easing,
+          isInteraction: isInteraction,
           useNativeDriver: useNativeDriver
         }).start(({ finished }) => {
           if (finished) {
@@ -159,35 +159,36 @@ export default class TextMarquee extends PureComponent {
               this.animateScroll()
             }
           }
-        })} else {
-          this.start()
-        }
+        })
+      } else {
+        this.start()
+      }
     }, marqueeDelay)
   }
 
   animateBounce = () => {
-    const {duration, marqueeDelay, loop, isInteraction, useNativeDriver, easing, bounceSpeed, bouncePadding, bounceDelay, isRTL} = this.props
+    const { duration, marqueeDelay, loop, isInteraction, useNativeDriver, easing, bounceSpeed, bouncePadding, bounceDelay, isRTL } = this.props
     const rtl = isRTL ?? I18nManager.isRTL;
     const bounceEndPadding = rtl ? bouncePadding?.left : bouncePadding?.right;
     const bounceStartPadding = rtl ? bouncePadding?.right : bouncePadding?.left;
     this.setTimeout(() => {
       Animated.sequence([
         Animated.timing(this.animatedValue, {
-          toValue:         rtl ? this.distance + (bounceEndPadding ?? 10) : -this.distance - (bounceEndPadding ?? 10),
-          duration:        duration || (this.distance) * bounceSpeed,
-          easing:          easing,
-          isInteraction:   isInteraction,
+          toValue: rtl ? this.distance + (bounceEndPadding ?? 10) : -this.distance - (bounceEndPadding ?? 10),
+          duration: duration || (this.distance) * bounceSpeed,
+          easing: easing,
+          isInteraction: isInteraction,
           useNativeDriver: useNativeDriver
         }),
         Animated.timing(this.animatedValue, {
-          toValue:         rtl ? -(bounceStartPadding ?? 10) : bounceStartPadding ?? 10,
-          duration:        duration || (this.distance) * bounceSpeed,
-          easing:          easing,
-          isInteraction:   isInteraction,
+          toValue: rtl ? -(bounceStartPadding ?? 10) : bounceStartPadding ?? 10,
+          duration: duration || (this.distance) * bounceSpeed,
+          easing: easing,
+          isInteraction: isInteraction,
           useNativeDriver: useNativeDriver,
           delay: bounceDelay
         })
-      ]).start(({finished}) => {
+      ]).start(({ finished }) => {
         if (finished) {
           this.hasFinishedFirstLoop = true
         }
@@ -202,9 +203,11 @@ export default class TextMarquee extends PureComponent {
     this.setState({ animating: true })
     this.setTimeout(async () => {
       await this.calculateMetrics()
+      // Wait for 'this.setState' to update 'this.state.contentFits' in 'calculateMetrics()'.
+      await new Promise(resolve => setTimeout(resolve, 100))
       if (!this.state.contentFits) {
-        const {onScrollStart} = this.props
-        if(onScrollStart && typeof onScrollStart === "function") {
+        const { onScrollStart } = this.props
+        if (onScrollStart && typeof onScrollStart === "function") {
           onScrollStart()
         }
         if (this.props.animationType === 'auto') {
@@ -228,20 +231,18 @@ export default class TextMarquee extends PureComponent {
   }
 
   async calculateMetrics() {
-    const {shouldAnimateTreshold} = this.props
+    const { shouldAnimateTreshold } = this.props
     this.calculateMetricsPromise = this.makeCancelable(new Promise(async (resolve, reject) => {
       try {
         const measureWidth = node =>
           new Promise(async (resolve, reject) => {
-            // nodehandle is not always there, causes crash. modified to check..
-            const nodeHandle = findNodeHandle(node);
-            if (nodeHandle) {
-              UIManager.measure(nodeHandle, (x, y, w) => {
+            if (node) {
+              node.measure((x, y, w) => {
                 // console.log('Width: ' + w)
                 return resolve(w)
               })
             } else {
-              return reject('nodehandle_not_found');
+              return reject('node_not_found');
             }
           });
         const [containerWidth, textWidth] = await Promise.all([
@@ -257,7 +258,7 @@ export default class TextMarquee extends PureComponent {
         resolve({
           // Is 1 instead of 0 to get round rounding errors from:
           // https://github.com/facebook/react-native/commit/a534672
-          contentFits:  this.distance <= 1,
+          contentFits: this.distance <= 1,
           shouldBounce: this.distance < this.containerWidth / 8
         })
       } catch (error) {
@@ -310,7 +311,7 @@ export default class TextMarquee extends PureComponent {
   }
 
   render() {
-    const { style, children, repeatSpacer, scroll, shouldAnimateTreshold, disabled, isRTL, ... props } = this.props
+    const { style, children, repeatSpacer, scroll, shouldAnimateTreshold, disabled, isRTL, ...props } = this.props
     const { animating, contentFits, isScrolling } = this.state
     const additionalContainerStyle = {
       // This is useful for shouldAnimateTreshold only:
@@ -330,14 +331,14 @@ export default class TextMarquee extends PureComponent {
         onScrollBeginDrag={this.scrollBegin}
         onScrollEndDrag={this.scrollEnd}
         showsHorizontalScrollIndicator={false}
-        style={[StyleSheet.absoluteFillObject, (isRTL ?? I18nManager.isRTL) && { flexDirection: 'row-reverse' } ]}
+        style={[StyleSheet.absoluteFillObject, (isRTL ?? I18nManager.isRTL) && { flexDirection: 'row-reverse' }]}
         display={animating ? 'flex' : 'none'}
         onContentSizeChange={() => this.calculateMetrics()}
       >
         <Animated.Text
           ref={c => (this.textRef = c)}
           numberOfLines={1}
-          {... props}
+          {...props}
           style={[style, { transform: [{ translateX: this.animatedValue }], width: null }]}
         >
           {this.props.children}
@@ -346,12 +347,12 @@ export default class TextMarquee extends PureComponent {
           ? <View style={{ paddingLeft: repeatSpacer }}>
             <Animated.Text
               numberOfLines={1}
-              {... props}
+              {...props}
               style={[style, { transform: [{ translateX: this.animatedValue }], width: null }]}
             >
               {this.props.children}
             </Animated.Text>
-          </View> : null }
+          </View> : null}
       </ScrollView>
     );
     return (
